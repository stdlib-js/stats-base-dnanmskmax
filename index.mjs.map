{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/dnanmskmax.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero';\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a double-precision floating-point strided array according to a mask, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Uint8Array} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @param {NonNegativeInteger} offsetMask - `mask` starting index\n* @returns {number} maximum value\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import Uint8Array from '@stdlib/array-uint8';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var mask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 ] );\n*\n* var v = dnanmskmax( 5, x, 2, 1, mask, 2, 1 );\n* // returns 4.0\n*/\nfunction dnanmskmax( N, x, strideX, offsetX, mask, strideMask, offsetMask ) {\n\tvar max;\n\tvar ix;\n\tvar im;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tix = offsetX;\n\tim = offsetMask;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v && mask[ im ] === 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t\tim += strideMask;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmax = v;\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tim += strideMask;\n\t\tif ( mask[ im ] ) {\n\t\t\tcontinue;\n\t\t}\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( v > max || ( v === max && isPositiveZero( v ) ) ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max;\n}\n\n\n// EXPORTS //\n\nexport default dnanmskmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a double-precision floating-point strided array according to a mask, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Uint8Array} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @returns {number} maximum value\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import Uint8Array from '@stdlib/array-uint8';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 4.0, 2.0, NaN ] );\n* var mask = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\n*\n* var v = dnanmskmax( x.length, x, 1, mask, 1 );\n* // returns 2.0\n*/\nfunction dnanmskmax( N, x, strideX, mask, strideMask ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ), mask, strideMask, stride2offset( N, strideMask ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dnanmskmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport dnanmskmax from './dnanmskmax.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnanmskmax, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnanmskmax;\n"],"names":["dnanmskmax","N","x","strideX","offsetX","mask","strideMask","offsetMask","max","ix","im","v","i","NaN","isnan","isPositiveZero","ndarray","stride2offset","setReadOnly"],"mappings":";;2aAkDA,SAASA,EAAYC,EAAGC,EAAGC,EAASC,EAASC,EAAMC,EAAYC,GAC9D,IAAIC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKX,GAAK,EACT,OAAOY,IAIR,IAFAJ,EAAKL,EACLM,EAAKH,EACCK,EAAI,EAAGA,EAAIX,KAChBU,EAAIT,EAAGO,KACIE,GAAoB,IAAfN,EAAMK,IAFHE,IAKnBH,GAAMN,EACNO,GAAMJ,EAEP,GAAKM,IAAMX,EACV,OAAOY,IAIR,IAFAL,EAAMG,EACNC,GAAK,EACIA,EAAIX,EAAGW,IACfH,GAAMN,EAEDE,EADLK,GAAMJ,KAINK,EAAIT,EAAGO,GACFK,EAAOH,KAGPA,EAAIH,GAASG,IAAMH,GAAOO,EAAgBJ,MAC9CH,EAAMG,IAGR,OAAOH,CACR,CC1CA,SAASR,EAAYC,EAAGC,EAAGC,EAASE,EAAMC,GACzC,OAAOU,EAASf,EAAGC,EAAGC,EAASc,EAAehB,EAAGE,GAAWE,EAAMC,EAAYW,EAAehB,EAAGK,GACjG,CCrBAY,EAAAlB,EAAA,UAAAgB"}